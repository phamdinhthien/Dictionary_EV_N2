/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dictionary2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import com.sun.speech.freetts.*;
public class Dictionary extends javax.swing.JFrame {

    /**
     * Creates new form Dictionary
     */
    public Dictionary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtEnglishInput = new javax.swing.JTextField();
        bTranslate = new javax.swing.JButton();
        bSearcher = new javax.swing.JButton();
        bAdd = new javax.swing.JButton();
        bRemove = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        bStart = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lSearcher = new javax.swing.JList<>();
        lMessege = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        bVoice = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDictionary = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dictionary2/bk1.png"))); // NOI18N
        jLabel5.setText("jLabel5");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dictionary2/bk1.png"))); // NOI18N
        jLabel6.setText("jLabel6");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dictionary2/bk1.png"))); // NOI18N
        jLabel4.setText("jLabel4");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dictionary2/bk1.png"))); // NOI18N
        jLabel7.setText("jLabel7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("VNI-Cooper", 0, 13)); // NOI18N
        jLabel1.setText("English :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        txtEnglishInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtEnglishInputMouseClicked(evt);
            }
        });
        txtEnglishInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnglishInputActionPerformed(evt);
            }
        });
        getContentPane().add(txtEnglishInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 116, -1));

        bTranslate.setText("Translate");
        bTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTranslateActionPerformed(evt);
            }
        });
        getContentPane().add(bTranslate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, -1, -1));

        bSearcher.setText("Searcher");
        bSearcher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearcherActionPerformed(evt);
            }
        });
        getContentPane().add(bSearcher, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, -1, -1));

        bAdd.setText("Add");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });
        getContentPane().add(bAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, -1, -1));

        bRemove.setText("Remove");
        bRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(bRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, -1, -1));

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(bUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, -1, -1));

        bStart.setFont(new java.awt.Font("Stencil Std", 0, 13)); // NOI18N
        bStart.setForeground(new java.awt.Color(255, 0, 0));
        bStart.setText("Start");
        bStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStartActionPerformed(evt);
            }
        });
        getContentPane().add(bStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 20, -1, -1));

        lSearcher.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lSearcherMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lSearcher);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 70, 150));

        lMessege.setFont(new java.awt.Font("VNI-Cooper", 0, 14)); // NOI18N
        lMessege.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(lMessege, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 230, 20));

        jLabel8.setFont(new java.awt.Font("VNI-Cooper", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 153));
        jLabel8.setText("Vietnamese");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, -1, -1));

        jLabel9.setFont(new java.awt.Font("VNI-Cooper", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 204, 204));
        jLabel9.setText("Searcher");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, -1, -1));

        bVoice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dictionary2/SoundIcon.png"))); // NOI18N
        bVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVoiceActionPerformed(evt);
            }
        });
        getContentPane().add(bVoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 40, 30));

        taDictionary.setColumns(20);
        taDictionary.setRows(5);
        taDictionary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taDictionaryMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(taDictionary);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 380, 630));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 40, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
  ArrayList<Word> list; // creat the list of words

  /**
   * read words from file <path s> 
   * @param s
   * @throws FileNotFoundException 
   */
    public void insertFromFile(String s) throws FileNotFoundException {
        File file = new File(s);
        try (Scanner input = new Scanner(file)) {
            list = new ArrayList<>();
            String str1;
            String str2;
            while (input.hasNext()) {
                str1 = input.next();
                str2 = input.nextLine();
                list.add(new Word(str1, str2));
            }
        }

        Collections.sort(list, (Word w1, Word w2) -> (w1.getWord_target().compareTo(w2.getWord_target())));
    }

    /**
     * Override data to file by path
     *
     * @param s - file path
     * @throws IOException
     */
    public void dictionaryExportToFile(String s) throws IOException {
        File file = new File(s);
        try (PrintWriter pw = new PrintWriter(file)) {
            for (int i = 0; i < list.size(); i++) {
                pw.println(list.get(i).getWord_target().trim() + "      " + list.get(i).getWord_explain().trim());
            }

        } catch (Exception e) {

        }

    }
/**
 * check the same word in the list from adding new word
 * @param newEnglish
 * @return 
 */
    public boolean checkSameWord(String newEnglish)
    {
        for(int i = 0; i < list.size(); i++)
        {
          if(list.get(i).getWord_target().equals(newEnglish))
          {
              return false;
          }
        }
        return true;
    }
    
    
    DefaultListModel modelList = new DefaultListModel();
/**
 * translate word1 which is inputted 
 * @param word1 
 */
    public void dictionaryLookup(String word1) {
        int count = 0;
        for (int i = 0; i < list.size(); i++) {
            if (word1.equals(list.get(i).getWord_target())) {
                taDictionary.setText(list.get(i).getWord_explain().replaceAll("\\r|\\n", "").trim());
                count++;
                lMessege.setText("Translate Successfully");
                break;
            }
        }
        if (count == 0) {
            lMessege.setText("Your word is not available");
        }
    }

 /**
  * search words containing subWord
  * @throws FileNotFoundException 
  */
    public void dictionarySearcher() throws FileNotFoundException {
        String subWord = txtEnglishInput.getText();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getWord_target().indexOf(subWord) == 0) {
                modelList.addElement(list.get(i).getWord_target() + "\n");
            }
        }
        lSearcher.setModel(modelList);
    }

    /**
     * translate Function : translate word inputted
     * @param evt 
     */
    private void bTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTranslateActionPerformed
        taDictionary.setText("");
        String eInput = txtEnglishInput.getText().trim();
        dictionaryLookup(eInput);
        
    }//GEN-LAST:event_bTranslateActionPerformed
    /**
     * Search Function String word (in dictionatySearcher) : subWord
     *
     * @param evt
     */
    private void bSearcherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearcherActionPerformed
        try {
            modelList.clear();
            if(!txtEnglishInput.getText().isEmpty())
            {dictionarySearcher();}
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bSearcherActionPerformed
    /**
     * Add Function eNew : the new English word is added vNew : 
     * the new Vietnamese word is added
     *
     * @param evt
     */
    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
        lMessege.setText("");
        String eNew = txtEnglishInput.getText();
        String vNew = taDictionary.getText();
        
        if (!vNew.isEmpty() && !eNew.isEmpty()) {
            if(checkSameWord(eNew) == true){ // check added word which existed in the list
                 int choose = JOptionPane.showConfirmDialog(null, "Do U wanna add the new word");
                 switch (choose) {
                  case 0:
                    list.add(new Word(eNew, vNew.replaceAll("\\r\\n|\\r|\\n", " ")));
                    lMessege.setText("Add Successfully");
                    break;
                  case 1:
                    lMessege.setText("Stop Adding");
                    break;
                default:
                    lMessege.setText("Cancel Adding");
                    break;
                    }
                 txtEnglishInput.setText("");
                 taDictionary.setText("");
               }
            else 
            {
              lMessege.setText("This word existed");
            }
          }
        else {
            lMessege.setText("Error");
        }
        try {
            dictionaryExportToFile("dictionary2.txt");
        } catch (IOException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_bAddActionPerformed

    /**
     * Remove Function eInput : the English word is inputted
     *
     * @param evt
     */
    private void bRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveActionPerformed
        lMessege.setText("");
        String eInput = txtEnglishInput.getText().trim();
        int choose = JOptionPane.showConfirmDialog(null, "Do U wanna remove");
        switch (choose) {
            case 0:
                if (!eInput.isEmpty()) {
                    for (int i = 0; i < list.size(); i++) {
                        if (eInput.equals(list.get(i).getWord_target().trim())) {
                            list.remove(i);
                        }
                    }
                    lMessege.setText("Remove Successfully");
                    try {
                        dictionaryExportToFile("dictionary2.txt");
                    } catch (IOException ex) {
                        Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    lMessege.setText("Error");
                }   break;
            case 1:
                lMessege.setText("Stop Removing");
                break;
            default:
                lMessege.setText("Cancel Removing");
                break;
        }

        txtEnglishInput.setText("");
        taDictionary.setText("");

    }//GEN-LAST:event_bRemoveActionPerformed

    /**
     * Update Function eInput : the English word is inputted 
     * eNew : the English word is updated
     * vNew : the Vietnamese word is updated
     * @param evt
     */
    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
        lMessege.setText("");
        String eInput = txtEnglishInput.getText().trim();
        String eNew = txtEnglishInput.getText();
        String vNew = taDictionary.getText();
        // System.out.println("Data update 3: " + vNew.replaceAll("\\r\\n|\\r|\\n", " "));
        //System.out.println("Data update 4: " + v.replaceAll("\\r|\\n", ""));
        int choose = JOptionPane.showConfirmDialog(null, "Do U wanna update");
        if (!vNew.isEmpty() && !eNew.isEmpty()) {
            switch (choose) {
                case 0:
                    for (int i = 0; i < list.size(); i++) {
                        if (eInput.equals(list.get(i).getWord_target().trim())) {
                            list.set(i, new Word(eNew, vNew.replaceAll("\\r\\n|\\r|\\n", " ")));
                            break;
                        }
                    }
                    lMessege.setText("Update Successfully");
                    try {
                        dictionaryExportToFile("dictionary2.txt");
                    } catch (IOException ex) {
                        Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case 1:
                    lMessege.setText("Stop Updating");
                    break;
                default:
                    lMessege.setText("Cancel Updating");
                    break;
            }
        } else {
            lMessege.setText("Error");
        }

        txtEnglishInput.setText("");
        taDictionary.setText("");
       

    }//GEN-LAST:event_bUpdateActionPerformed
    private void bStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStartActionPerformed
        try {
            insertFromFile("dictionary2.txt");
            lMessege.setText("Start Successfully");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bStartActionPerformed
    /**
     * SearcherMouseClicked Function ChoosedWord : the English Word is chosen
     * from the list of searcher
     *
     * @param evt
     */
    private void lSearcherMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lSearcherMouseClicked
        taDictionary.setText("");
        String ChosenWord = lSearcher.getSelectedValue().trim();
        dictionaryLookup(ChosenWord);
        lMessege.setText("");
    }//GEN-LAST:event_lSearcherMouseClicked

/**
 * handling sound 
 */
   private static final String VOICENAME = "kevin16";   
    private void bVoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVoiceActionPerformed
       Voice voice;
       VoiceManager vm = VoiceManager.getInstance();
       voice = vm.getVoice(VOICENAME);
       voice.allocate();
       voice.speak(txtEnglishInput.getText());
    }//GEN-LAST:event_bVoiceActionPerformed

    private void txtEnglishInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnglishInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnglishInputActionPerformed


    private void taDictionaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taDictionaryMouseClicked
       txtEnglishInput.setText(txtEnglishInput.getText());
       taDictionary.setText(taDictionary.getText());
    }//GEN-LAST:event_taDictionaryMouseClicked

    private void txtEnglishInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEnglishInputMouseClicked
       txtEnglishInput.setText(txtEnglishInput.getText());
       taDictionary.setText(taDictionary.getText());
    }//GEN-LAST:event_txtEnglishInputMouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Dictionary().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bRemove;
    private javax.swing.JButton bSearcher;
    private javax.swing.JButton bStart;
    private javax.swing.JButton bTranslate;
    private javax.swing.JButton bUpdate;
    private javax.swing.JButton bVoice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lMessege;
    private javax.swing.JList<String> lSearcher;
    private javax.swing.JTextArea taDictionary;
    private javax.swing.JTextField txtEnglishInput;
    // End of variables declaration//GEN-END:variables
}
